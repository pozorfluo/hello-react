{"version":3,"sources":["TodoEntry.js","Todo.js","BoilingTemp.js","TicTacToe.js","App.js","serviceWorker.js","index.js"],"names":["TodoEntry","props","formatted_list","list","map","entry","i","className","key","onClick","onDelete","style","listStyleType","reverse","Todo","useState","setList","count","length","Fragment","id","onSubmit","event","target","new_entry","value","preventDefault","type","name","new_list","splice","scales","c","f","IsItBoiling","verdict","celsius","color","TemperatureInput","scale","temp","onChange","Temperature","setTemp","fahrenheit","toCelsius","toFahrenheit","parseFloat","FancyBox","height","width","backgroundColor","borderRadius","children","Square","Board","renderSquare","squares","Moves","desc","TicTacToe","Array","fill","history","setHistory","turn","setTurn","step","setStep","current","winner","calculateWinner","status","slice","handleClick","jumpTo","lines","a","b","App","to","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.483c338d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoEntry = (props) => {\n  const formatted_list = props.list.map((entry, i) => {\n    return (\n      <li className=\"item\" key={entry[0]}>\n        {entry[0]} : {entry[1]}\n        <button className=\"x-button\" onClick={() => props.onDelete(i)}>X</button>\n      </li>\n    );\n  });\n\n  return (\n    <ul className=\"sidebar\" style={{ listStyleType: 'none' }}>\n      {formatted_list.reverse()}\n    </ul>\n  );\n};\n\nTodoEntry.propTypes = {\n  list: PropTypes.array.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport { TodoEntry } from './TodoEntry';\n\nexport const Todo = () => {\n  const [list, setList] = useState([]);\n\n  const count = list.length;\n\n  return (\n    <React.Fragment>\n      <div>\n        <p>{count}</p>\n        <button\n          onClick={() => {\n            const id = count ? list[count - 1][0] + 1 : 0;\n            setList([...list, [id, count]]);\n          }}\n        >\n          Add Count to list\n        </button>\n        <form\n          onSubmit={(event) => {\n            const entry = event.target.new_entry;\n            if (entry.value !== null && entry.value !== '') {\n              const id = count ? list[count - 1][0] + 1 : 0;\n              setList([...list, [id, entry.value]]);\n              entry.value = '';\n            }\n            event.preventDefault();\n          }}\n        >\n          <input type=\"text\" name=\"new_entry\" />\n        </form>\n      </div>\n      <TodoEntry \n        list={list}\n        onDelete={(i) => {\n          const new_list = [...list];\n          new_list.splice(i, 1);\n          setList(new_list);\n        }}\n      />\n    </React.Fragment>\n  );\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst scales = {\n  c: '°C',\n  f: '°F',\n};\n\nfunction toCelsius(fahrenheit) {\n  return ((fahrenheit - 32) * 5) / 9;\n}\n\nfunction toFahrenheit(celsius) {\n  return (celsius * 9) / 5 + 32;\n}\n\nexport const IsItBoiling = (props) => {\n  const verdict = props.celsius >= 100 ? '˳˚॰°ₒ৹๐' : '';\n  return (\n    <FancyBox color=\"blue\">\n      <h2>{verdict}</h2>\n    </FancyBox>\n  );\n};\n\nIsItBoiling.propTypes = {\n  celsius: PropTypes.number.isRequired,\n};\n\nexport const TemperatureInput = (props) => {\n  return (\n    <fieldset>\n      <legend>Enter temperature in {scales[props.scale]}:</legend>\n      <input\n        value={props.temp}\n        onChange={(event) => props.onChange(event.target.value)}\n      />\n      {/* <input value={props.temp} onInput={(event) => setTemp(event.target.value)} /> */}\n    </fieldset>\n  );\n};\n\nTemperatureInput.propTypes = {\n  scale: PropTypes.string.isRequired,\n  temp: PropTypes.number.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport const Temperature = () => {\n  const [temp, setTemp] = useState({ scale: 'c', value: 0 });\n\n  const celsius = temp.scale === 'f' ? toCelsius(temp.value) : temp.value;\n  const fahrenheit = temp.scale === 'c' ? toFahrenheit(temp.value) : temp.value;\n\n  return (\n    <div>\n      <TemperatureInput\n        scale=\"c\"\n        temp={celsius}\n        onChange={(value) => {\n          value = (value !== null && value !== '') ? value : 0;\n          setTemp({ scale: 'c', value: parseFloat(value) });\n        }}\n      />\n      <TemperatureInput\n        scale=\"f\"\n        temp={parseFloat(fahrenheit)}\n        onChange={(value) => {\n          value = (value !== null && value !== '') ? value : 0;\n          setTemp({ scale: 'f', value: parseFloat(value) });\n        }}\n      />\n      <IsItBoiling celsius={parseFloat(celsius)} />\n    </div>\n  );\n};\n\nexport const FancyBox = (props) => {\n  return (\n    <div\n      style={{\n        height: '100px',\n        width: '100%',\n        backgroundColor: props.color,\n        borderRadius: '4px'\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nFancyBox.propTypes = {\n  color: PropTypes.string.isRequired,\n  children: PropTypes.element,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './tictactoe.css';\n\nexport const Square = (props) => {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n};\n\nSquare.propTypes = {\n  value: PropTypes.string,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport const Board = (props) => {\n  const renderSquare = (i) => {\n    return <Square value={props.squares[i]} onClick={() => props.onClick(i)} />;\n  };\n\n  return (\n    <div>\n      <div className=\"board-row\">\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </div>\n    </div>\n  );\n};\n\nBoard.propTypes = {\n  squares: PropTypes.array.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport const Moves = (props) => {\n  const formatted_list = props.list.map((entry, i) => {\n    const desc = i ? 'Go to move #' + i : 'Reset';\n    return (\n      <li className=\"item\" key={entry[0]}>\n        {entry[0]} : {desc}\n        <button className=\"x-button\" onClick={() => props.onClick(i)}>\n          &larr;\n        </button>\n      </li>\n    );\n  });\n\n  return <ul style={{ listStyleType: 'none' }}>{formatted_list.reverse()}</ul>;\n};\n\nMoves.propTypes = {\n  list: PropTypes.array.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport const TicTacToe = () => {\n  let [history, setHistory] = useState([[0, Array(9).fill(null)]]);\n  const [turn, setTurn] = useState(true);\n  const [step, setStep] = useState(0);\n\n  const current = history[step][1];\n  const winner = calculateWinner(current);\n  const status = winner\n    ? 'Winner : ' + winner\n    : 'Next player : ' + (turn ? 'X' : 'O');\n\n  const handleClick = (i) => {\n    history = history.slice(0, step + 1);\n    const count = history.length;\n    const current = history[count - 1][1];\n    const squares = [...current];\n    if (calculateWinner(current) || squares[i]) {\n      return;\n    }\n    squares[i] = turn ? 'X' : 'O';\n    const id = count ? history[count - 1][0] + 1 : 0;\n    /** This looks like a good place to break the symmetry and just use push. */\n    setHistory([...history, [id, squares]]);\n    setStep(count);\n    setTurn(!turn);\n  };\n\n  const jumpTo = (step) => {\n    setStep(step);\n    setTurn(!(step & 1));\n  };\n\n  return (\n    <>\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board squares={current} onClick={(i) => handleClick(i)} />\n        </div>\n      </div>\n\n      <div className=\"status sidebar\">\n        {status}\n        <Moves list={history} onClick={(step) => jumpTo(step)} />\n      </div>\n    </>\n  );\n};\n\nconst calculateWinner = (squares) => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n};\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport {Todo} from './Todo.js';\n// import { SquareFn, TextField } from './Square.js';\nimport {Temperature} from './BoilingTemp.js';\n// import { render } from '@testing-library/react';\nimport { TicTacToe } from './TicTacToe.js';\n\nfunction App() {\n  //   const user = { firstname: 'Kakana', lastname: 'Lambert' };\n  return (\n    <Router>\n      <nav>\n        <ul>\n          <li>\n            <Link to=\"/\">TicTacToe</Link>\n          </li>\n          <li>\n            <Link to=\"/boiling\">BoilingTemp</Link>\n          </li>\n          <li>\n            <Link to=\"/todo\">Todo</Link>\n          </li>\n        </ul>\n      </nav>\n\n      <Switch>\n      <Route path=\"/boiling\">\n          <div className=\"App\">\n            <header className=\"App-body\">\n              <Temperature/>\n            </header>\n          </div>\n        </Route>\n      <Route path=\"/todo\">\n          <div className=\"App\">\n            <header className=\"App-body\">\n              <Todo/>\n            </header>\n          </div>\n        </Route>\n        <Route path=\"/\">\n          <div className=\"App\">\n            <header className=\"App-body\">\n\n              <TicTacToe />\n            </header>\n          </div>\n        </Route>\n      </Switch>\n    </Router>\n    // <div className=\"App\">\n    //   <header className=\"App-body\">\n    //     {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n\n    //     {/* <Square user={user} /> */}\n    //     {/* <SquareFn user={user} id=\"00\"/>\n    //     <TextField id=\"00\"/>\n    //     <TextField id=\"01\"/>\n    //     <TextField id=\"02\"/> */}\n    //     <TicTacToe />\n    //     {/* <Temperature/> */}\n    //     {/* <Todo /> */}\n    //   </header>\n    // </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}